import functools
import re

data = "\
7316717653133062491922511967442657474235534919493496983520312774\
5063262395783180169848018694788518438586156078911294949545950173\
7958331952853208805511125406987471585238630507156932909632952274\
4304355766896648950445244523161731856403098711121722383113622298\
9342338030813533627661428280644448664523874930358907296290491560\
4407723907138105158593079608667017242712188399879790879227492190\
1699720888093776657273330010533678812202354218097512545405947522\
4352584907711670556013604839586446706324415722155397536978179778\
4617406495514929086256932197846862248283972241375657056057490261\
4079729686524145351004748216637048440319989000889524345065854122\
7588666881164271714799244429282308634656748139191231628245861786\
6458359124566529476545682848912883142607690042242190226710556263\
2111110937054421750694165896040807198403850962455444362981230987\
8799272442849091888458015616609791913387549920052406368991256071\
7606058861164671094050775410022569831552000559357297257163626956\
1882670428252483600823257530420752963450\
"

def find_largest_product_of_thirteen_adjacent_digits(data, start_index=0, end_index=13):
    result = []
    while end_index + 1 <= len(data):
        chunk = data[start_index:end_index]
        if '0' in chunk:
            zero_index = [x.start() for x in list(re.finditer('0', chunk))]
            start_index += zero_index[-1]+1
            end_index = start_index + 13
        else:
            result.append(functools.reduce(lambda x, y : x*y, [int(x) for x in list(data[start_index:end_index])]))
            start_index += 1
            end_index += 1
    return max(result)

def main():
    print(find_largest_product_of_thirteen_adjacent_digits(data))

if __name__ == "__main__":
    main()
